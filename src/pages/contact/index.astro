---
export const prerender = false

import Layout from '@layouts/Layout.astro'
import { actions } from 'astro:actions'

const siteKey = import.meta.env.GOOGLE_RECAPTCHA_SITE_KEY

// Handle form submission
let message = ''
let errors: Record<string, string> = {}
let formData = { name: '', email: '', message: '' }
let recaptchaURL = `https://www.google.com/recaptcha/api.js?trustedtypes=true&render=${siteKey}`
---

<script src={recaptchaURL}></script>

<Layout title="Nathan Lardizabal | Contact">
	<h1 class="mb-8 text-2xl font-semibold">contact me!</h1>

	<p class="text-sm font-light text-slate-300">
		feel free to reach out to me via email or social media!
	</p>

	<hr class="my-4 border-slate-700" />

	{
		message && (
			<div class="mb-4 rounded border border-green-700 bg-green-900/20 p-3 text-green-300">
				{message}
			</div>
		)
	}

	<section>
		<form
			method="POST"
			action={actions.contact}
			class="space-y-4 text-sm font-light"
		>
			<div class="flex w-full gap-4">
				<div class="flex w-1/2 flex-col gap-2">
					<label for="name">name</label>
					<input
						type="text"
						id="name"
						name="name"
						required
						class={`rounded border px-2 py-2 bg-transparent ${
							errors.name ? 'border-red-500' : 'border-slate-700'
						}`}
						value={formData.name}
					/>
					{
						errors.name && (
							<span class="text-xs text-red-400">{errors.name}</span>
						)
					}
				</div>
				<div class="flex w-1/2 flex-col gap-2">
					<label for="email">email</label>
					<input
						type="email"
						id="email"
						name="email"
						required
						class={`rounded border px-2 py-2 bg-transparent ${
							errors.email ? 'border-red-500' : 'border-slate-700'
						}`}
						value={formData.email}
					/>
					{
						errors.email && (
							<span class="text-xs text-red-400">{errors.email}</span>
						)
					}
				</div>
			</div>

			<div class="flex flex-col gap-2">
				<label for="message">message</label>
				<textarea
					id="message"
					name="message"
					rows="6"
					required
					class={`rounded border px-2 py-2 bg-transparent ${
						errors.message ? 'border-red-500' : 'border-slate-700'
					}`}>{formData.message}</textarea
				>
				{
					errors.message && (
						<span class="text-xs text-red-400">{errors.message}</span>
					)
				}
			</div>

			<div class="flex justify-end">
				<button
					class="rounded border border-slate-700 bg-transparent px-4 py-2 transition-all hover:bg-slate-800 disabled:cursor-not-allowed disabled:opacity-50"
				>
					send
				</button>
			</div>
		</form>
	</section>
</Layout>
